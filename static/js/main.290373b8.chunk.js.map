{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","picker","leaveChat","pubnub","unsubscribe","channels","channel","onMessage","data","console","log","message","action","setState","newState","objectSpread","state","messages","unshift","id","timetoken","target_text","text","target_lang","translate","target","source_text","text_original","source_lang","source","userId","color","timestamp","onPresenceChange","presenceData","addUser","uuid","removeUser","error","onStatusChange","publishMessage","newMessage","Date","toISOString","publish","user","users","includes","push","_","filter","x","toggleTranslationDirection","name","event","enabled","checked","handleTextChange","value","handleColorChange","hex","parts","window","location","href","split","urlQuery","url","strs","length","Math","round","random","background","index","now","PubNubReact","publishKey","subscribeKey","init","assertThisInitialized","self","setInterval","addEventListener","subscribe","withPresence","getMessage","getPresence","getStatus","hereNow","status","response","occupants","forEach","timeString","maybeVal","moment","from","_this2","toConsumableArray","messageList","map","react_default","a","createElement","key","index_es","className","style","backgroundColor","variant","component","marginTop","fontSize","friendlyTime","marginBottom","fontFamily","flex","react_swipeable_views_lib_default","enableMouseEvents","lib","colors","ref","triangle","onChangeComplete","width","label","getTextFieldLabel","onChange","maxLength","onClick","qrcode_react_lib_default","height","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.290373b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport PubNubReact from 'pubnub-react';\nimport { GithubPicker } from 'react-color';\nimport { Button, Switch, Card, TextField, Typography, CardContent } from '@material-ui/core';\nimport QRCode from 'qrcode.react';\nimport SwipeableViews from 'react-swipeable-views';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const parts = window.location.href.split(\"?\");\n    this.urlQuery = ((parts && parts[1]) || 'default');\n\n    this.source_lang = \"en\";\n    this.target_lang = \"es\";\n\n    this.url = window.location.href;\n    const strs = this.urlQuery.split(\";\");\n\n    if (strs.length > 1) {\n      this.source_lang = strs[1];\n    }\n\n    if (strs.length > 2) {\n      this.target_lang = strs[2];\n    }\n\n    this.urlQuery = strs[0];\n    this.channel = 'chat.' + this.urlQuery;\n    this.userId = \"User\" + Math.round(Math.random() * 1000);\n\n    this.state = {\n      enabled: true,\n      background: '#aaa',\n      newMessage: 'hello world',\n      source_lang: this.source_lang,\n      target_lang: this.target_lang,\n      color: '#FFFFFF',\n      messages: [],\n      users: [],\n      index: 0,\n      now: new Date()\n    };\n\n    this.pubnub = new PubNubReact({\n      publishKey: 'pub-c-9c89a6f1-c3d5-40bf-bfa0-2ba3224f256d',\n      subscribeKey: 'sub-c-0b4b5b4e-f980-11e8-80f1-b6259b5c8742',\n      uuid: this.userId\n    });\n\n    this.pubnub.init(this);\n\n    var self = this;\n    setInterval(() => {\n      var newState = { ...self.state };\n      newState.now = new Date();\n      self.setState(() => {\n        return newState;\n      });\n    }, 30000)\n  }\n\n  picker = null;\n\n  componentWillMount() {\n    const self = this;\n\n    window.addEventListener('beforeunload', self.leaveChat);\n\n    this.pubnub.subscribe({\n      channels: [self.channel],\n      withPresence: true\n    });\n\n    this.pubnub.getMessage(this.channel, self.onMessage);\n    this.pubnub.getPresence(this.channel, self.onPresenceChange);\n    this.pubnub.getStatus(self.onStatusChange);\n\n    this.pubnub.hereNow({ channels: [this.channel] },\n      function (status, response) {\n        _(response.channels[self.channel].occupants).forEach((x) => self.addUser(x));\n      });\n  }\n\n  componentWillUnmount() {\n    this.leaveChat();\n  }\n\n  leaveChat = () => {\n    this.pubnub.unsubscribe({ channels: [this.channel] });\n  }\n\n  onMessage = (data) => {\n    console.log(data, data.message);\n\n    if (data.message.action === \"messageSend\") {\n      this.setState(() => {\n        var newState = { ...this.state };\n\n        newState.messages.unshift({\n          id: data.timetoken,\n          target_text: data.message.data.text,\n          target_lang: data.message.data.translate.target,\n          source_text: data.message.data.text_original,\n          source_lang: data.message.data.translate.source,\n          userId: data.message.userId,\n          color: data.message.color,\n          timestamp: data.message.timestamp\n        });\n\n        return newState;\n      });\n    }\n  }\n\n  onPresenceChange = (presenceData) => {\n    switch (presenceData.action) {\n      case 'join':\n        this.addUser(presenceData.uuid);\n        break;\n      case 'leave':\n      case 'timeout':\n        this.removeUser(presenceData.uuid);\n        break;\n      default:\n        console.error('unknown action: ' + presenceData.action);\n    }\n  }\n\n  onStatusChange = (data) => {\n    console.log('status changed', data);\n  }\n\n  publishMessage = userId => () => {\n    if (!this.state.newMessage) {\n      return;\n    }\n\n    // create message\n    const message = {\n      action: 'messageSend',\n      userId: userId,\n      timestamp: new Date().toISOString(),\n      color: this.state.color,\n      data: {\n        translate: {\n          source: this.state.source_lang,\n          target: this.state.target_lang,\n          text: this.state.newMessage\n        },\n        text_original: this.state.newMessage\n      }\n    };\n\n    // reset text box\n    var newState = { ...this.state };\n    newState.newMessage = \"\";\n    this.setState(() => {\n      return newState;\n    });\n\n    // publish message\n    this.pubnub.publish({\n      message: message,\n      channel: this.channel\n    });\n  }\n\n  addUser = user => {\n    if (!user) {\n      return;\n    }\n\n    if (user.uuid) {\n      user = user.uuid;\n    }\n\n    var newState = { ...this.state };\n\n    if (!this.state.users.includes(user)) {\n      newState.users.push(user);\n    }\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  removeUser = user => () => {\n    var newState = { ...this.state };\n    newState.users = _(newState.users).filter((x) => x !== user);\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  toggleTranslationDirection = name => event => {\n    var newState = { ...this.state };\n    newState.enabled = event.target.checked;\n\n    if (newState.enabled) {\n      newState.source_lang = this.source_lang;\n      newState.target_lang = this.target_lang;\n    } else {\n      newState.target_lang = this.source_lang;\n      newState.source_lang = this.target_lang;\n    }\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  getTextFieldLabel() {\n    return \"Type message... (\" + this.state.source_lang + \" → \" + this.state.target_lang + \")\";\n  }\n\n  handleTextChange = event => {\n    var newState = { ...this.state };\n    newState.newMessage = event.target.value;\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  handleColorChange = (color) => {\n    var newState = { ...this.state };\n    newState.color = color.hex;\n\n    this.setState(() => {\n      return newState;\n    });\n  }\n\n  friendlyTime(timeString) {\n    if (!timeString || !this.state.now) {\n      return \"a while ago\";\n    }\n\n    let maybeVal = moment(timeString).from(this.props.now);\n\n    if (maybeVal === \"in a few seconds\") {\n      return \"just now\";\n    }\n\n    return maybeVal;\n  }\n\n  render() {\n    var messages = [...this.state.messages];\n\n    var messageList = _.map(messages, message => {\n      return <div key={message.id}>\n        <Card className=\"App-card\" style={{ backgroundColor: message.color }}>\n          <CardContent className=\"App-cardcontent\">\n            <Typography variant=\"h3\" component=\"h3\" style={{ marginTop: \"20px\" }}><i>{message.target_text}</i></Typography>\n            <Typography variant=\"h3\" component=\"h3\" style={{ marginTop: \"30px\" }}>{message.source_text}</Typography>\n            <Typography variant=\"h6\" component=\"h6\" style={{ marginTop: \"40px\" }}>\n              - {message.userId}\n              <br />\n              <span style={{ fontSize: \"10px\" }}>[{message.source_lang} → {message.target_lang}, {this.friendlyTime(message.timestamp)}]</span>\n            </Typography>\n          </CardContent>\n        </Card>\n      </div>\n    });\n\n    messageList.push(<div key={0}>\n      <Card className=\"App-card\">\n        <CardContent className=\"App-cardcontent\">\n          <Typography variant=\"h3\" component=\"h3\" style={{ marginTop: '20px', marginBottom: '20px', fontFamily: '\"Lato\", sans-serif' }}>Welcome</Typography>\n          <Typography variant=\"h3\" component=\"h3\" style={{ marginBottom: '20px', fontFamily: 'Charm, cursive' }}>Bienvenue</Typography>\n          <Typography variant=\"h3\" component=\"h3\" style={{ marginBottom: '20px', fontFamily: '\"Roboto Slab\", serif' }}>Bienvenido</Typography>\n          <Typography variant=\"h3\" component=\"h3\" style={{ marginBottom: '20px', fontFamily: 'Lato, sans-serif' }}><i>Willkommen</i></Typography>\n        </CardContent>\n      </Card>\n    </div>);\n\n    return (\n      <div id=\"App\" className=\"App\" flex={1}>\n        <header className=\"App-header\" style={{ background: this.state.background }}>\n          <SwipeableViews className=\"App-cardport\" enableMouseEvents>\n            {messageList}\n          </SwipeableViews>\n          <div style={{ marginBottom: \"10px\" }}>\n            <GithubPicker\n              colors={['#FFFFFF', '#EB9694', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB']}\n              ref={(_) => { this.picker = _; }}\n              triangle={'hide'}\n              color={this.state.color}\n              onChangeComplete={this.handleColorChange}\n            />\n          </div>\n          <div style={{ marginTop: \"20px\", marginBottom: \"10px\" }}>\n            <TextField style={{ width: \"360px\" }} label={this.getTextFieldLabel()} value={this.state.newMessage} onChange={this.handleTextChange} maxLength=\"140\" />\n          </div>\n          <div style={{ marginBottom: \"20px\" }}>\n            <Switch checked={this.state.enabled} onChange={this.toggleTranslationDirection('enabled')} color=\"primary\" />\n            <Button onClick={this.publishMessage(this.userId)}>Send!</Button>\n          </div>\n          <div>\n            <h6>{this.userId} / #{this.channel} / 1 of {this.state.users.length} participants</h6>\n          </div>\n          <QRCode value={this.url} style={{ width: \"300px\", height: \"300px\" }} />\n          <div>\n            <h6>~</h6>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}